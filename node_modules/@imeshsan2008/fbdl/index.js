require('dotenv').config();
const { Cluster } = require('puppeteer-cluster');
const { MongoClient } = require('mongodb');

// MongoDB Configuration
const mongoURL = 'mongodb+srv://imeshsan2008:Imeshsandeepa018@cluster0.sirdt.mongodb.net/?retryWrites=true&w=majority&appName=Cluster';

const dbName = process.env.DB_NAME || 'apisite';
let db;

// MongoDB Connection
const mongoClient = new MongoClient(mongoURL);

const connectToMongoDB = async () => {
  if (!db) {
    await mongoClient.connect();
    db = mongoClient.db(dbName);
    console.log('Connected to MongoDB');
  }
  return db;
};

// Validate API Key
const validateApiKey = async (apikey) => {
  try {
    const user = await db.collection('users').findOne({ apikey });
    return !!user;
  } catch (err) {
    console.error('Error validating API key:', err.message);
    throw err;
  }
};

// Extract TikTok Video Data using Puppeteer Cluster
const extractTikTokData = async (cluster, url) => {
  return await cluster.execute(url);
};

// Main Function
const processTikTokVideo = async (url, apikey) => {
  try {
    await connectToMongoDB();

    const isValidApiKey = await validateApiKey(apikey);
    if (!isValidApiKey) {
      console.error('Invalid API key');
      return { error: 'Invalid API key' };
    }

    // Puppeteer Cluster Setup
    const cluster = await Cluster.launch({
      concurrency: Cluster.CONCURRENCY_PAGE, // Use separate browser tabs
     executablePath: '/usr/bin/chromium-browser',
,
      maxConcurrency: 500, // Up to 5 concurrent tasks
      puppeteerOptions: {
        headless: true,
        
        args: ['--no-sandbox', '--disable-setuid-sandbox'],
      },
    });

    cluster.task(async ({ page, data: videoURL }) => {
      await page.goto('https://ssstik.io/');
      await page.type('#main_page_text', videoURL);
      await page.click('#submit');
      await page.waitForSelector('.result_overlay');

      const authorInfo = {
        authorName: await page.$eval('#avatarAndTextUsual h2', (el) => el?.innerText.trim() || 'N/A'),
        authorImage: await page.$eval('#avatarAndTextUsual img.result_author', (el) => el?.src || 'N/A'),
      };

      const videoInfo = {
        likes: await page.$eval('#trending-actions .d-flex:nth-child(1) div:nth-child(2)', (el) => el?.innerText.trim() || '0'),
        comments: await page.$eval('#trending-actions .d-flex:nth-child(2) div:nth-child(2)', (el) => el?.innerText.trim() || '0'),
        shares: await page.$eval('#trending-actions .d-flex:nth-child(3) div:nth-child(2)', (el) => el?.innerText.trim() || '0'),
        coverImage: await page.$eval('#mainpicture .result_overlay', (el) => {
          const style = window.getComputedStyle(el);
          return style.backgroundImage.slice(5, -2) || 'N/A';
        }),
        withoutWatermarkVideo: await page.$eval('#dl_btns .without_watermark', (el) => el?.href || 'N/A'),
        mp3Link: await page.$eval('#dl_btns .music', (el) => el?.href || 'N/A'),
      };

      return { authorInfo, videoInfo };
    });

    const result = await extractTikTokData(cluster, url);
    await cluster.idle();
    await cluster.close();

    console.log('Extraction result:', result);
    return result;
  } catch (err) {
    console.error('Error processing TikTok video:', err.message);
    return { error: 'Internal server error' };
  }
};

// Export for external use
module.exports = {
  processTikTokVideo,
};
// Error processing TikTok video: querySrv ENOTFOUND _mongodb._tcp.cluster.mongodb.net
